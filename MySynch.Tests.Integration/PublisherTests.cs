using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using MySynch.Common.Serialization;
using MySynch.Contracts.Messages;
using MySynch.Core;
using MySynch.Core.DataTypes;
using MySynch.Core.Publisher;
using MySynch.Core.Subscriber;
using MySynch.Proxies.Autogenerated.Implementations;
using MySynch.Proxies.Autogenerated.Interfaces;
using NUnit.Framework;

namespace MySynch.Tests.Integration
{
    [TestFixture]
    [Category("integration")]
    [Ignore("Start the servives at the specified address and after that this should run")]
    public class PublisherTests
    {
        [Test]
        public void PublisherServiceUpAndAccessible()
        {
            IPublisherProxy publisherProxy = new PublisherClient();
            publisherProxy.InitiateUsingServerAddress(@"http://localhost/publisher");
            var response = publisherProxy.GetHeartbeat();
            Assert.True(response.Status);
            Assert.IsNotNull(response.RootPath);
        }

        [Test]
        [Ignore(@"Assumes that the publisher is watching the folder C:\MySynch.Source.Test.Root\ and the broker service is up and running")]
        public void PublisherServicePublishAMessage()
        {
            File.Copy(@"Data\File1.xml", @"C:\MySynch.Source.Test.Root\File1.xml", true);
            BrokerClient clientBuild = new BrokerClient();
            clientBuild.InitiateUsingServerAddress("http://sciendo-laptop/broker");
            var response = clientBuild.ListAllMessages();
            Assert.IsNotNull(response);
            Assert.IsNotNull(response.AvailableMessages);
            Assert.AreEqual(1, response.AvailableMessages.Select(a=>a.AbsolutePath).ToList().Distinct().Count());

            Assert.AreEqual(@"http://sciendo-laptop/publisher/", response.AvailableMessages[0].SourceOfMessageUrl);
            Assert.AreEqual(@"C:\MySynch.Source.Test.Root\", response.AvailableMessages[0].SourcePathRootName);
            Assert.AreEqual(@"C:\MySynch.Source.Test.Root\File1.xml", response.AvailableMessages[0].AbsolutePath);
            Assert.AreEqual(OperationType.Update, response.AvailableMessages[0].OperationType);
        }

        [Test]
        [Ignore(@"Requires the file C:\MySynch.Source.Test.Root\File1.xml to be present")]
        public void DataSourceUpAndAccessible()
        {

            IPublisherProxy publisherClient = new PublisherClient();
            publisherClient.InitiateUsingServerAddress(@"http://localhost/publisher");
            var data = publisherClient.GetData(new GetDataRequest { FileName = @"C:\MySynch.Source.Test.Root\File1.xml" });
            Assert.IsNotNull(data);
            Assert.IsNotNull(data.Data);
            UTF8Encoding encoding = new UTF8Encoding();
            var content = encoding.GetString(data.Data);
            Assert.AreEqual(@"﻿<?xml version=""1.0"" encoding=""utf-8"" ?>
<ab>
  <ba>abbba</ba>
</ab>
", content);
        }

        [Test]
        [Ignore(@"Requires the file C:\MySynch.Source.Test.Root\bigFile.big to be present")]
        public void DayaSourceTransferBigFile()
        {

            IPublisherProxy sourceOfDataProxy = new PublisherClient();
            sourceOfDataProxy.InitiateUsingServerAddress(@"http://localhost/publisher/");
            var data = sourceOfDataProxy.GetData(new GetDataRequest { FileName = @"C:\MySynch.Source.Test.Root\bigFile.big" });
            Assert.IsNotNull(data);
            Assert.IsNotNull(data.Data);
        }

        [Test]
        public void PublisherSavingABackupFileOnStop()
        {
            ServiceController serviceController = new ServiceController("MySynch.Publisher.Debug");
            Thread.Sleep(10000);//warm up time
            File.Copy(@"Data\XMLFile2.xml", @"C:\MySynch.Source.Test.Root\XMLFile2.xml", true);
            Thread.Sleep(5000);//warm up time
            serviceController.Stop();
            serviceController.WaitForStatus(ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(300));
            var backup = Serializer.DeserializeFromFile<SynchItem>(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml");
            Assert.AreEqual(1, SynchItemManager.FlattenTree(backup[0]).Count(t => t.Identifier == @"C:\MySynch.Source.Test.Root\XMLFile2.xml"));
            File.Delete(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml");
            File.Delete(@"C:\MySynch.Source.Test.Root\XMLFile2.xml");
            serviceController.Start();
            serviceController.WaitForStatus(ServiceControllerStatus.Running, TimeSpan.FromSeconds(300));

        }

        [Test]
        public void PublisherStartsWithoutABackupFile()
        {
            ServiceController serviceController = new ServiceController("MySynch.Publisher.Debug");
            serviceController.Stop();
            serviceController.WaitForStatus(ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(100));

            if (File.Exists(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml"))
                File.Delete(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml");

            serviceController.Start();
            serviceController.WaitForStatus(ServiceControllerStatus.Running, TimeSpan.FromSeconds(300));
            Thread.Sleep(20); //warm up
            serviceController.Stop();
            serviceController.WaitForStatus(ServiceControllerStatus.Running, TimeSpan.FromSeconds(300));
            Assert.True(File.Exists(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml"));
            FileInfo fInfo = new FileInfo(@"C:\Code\Sciendo\MySynch\MySynch.Publisher\bin\Debug\backup.xml");
            Assert.AreEqual(0, fInfo.Length);
        }

    }
}
