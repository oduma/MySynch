using Castle.MicroKernel.Registration;
using Castle.MicroKernel.SubSystems.Configuration;
using Castle.Windsor;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core;
using MySynch.Core.Interfaces;
using MySynch.Core.Publisher;
using MySynch.Core.Subscriber;
using MySynch.Proxies.Autogenerated.Interfaces;

namespace MySynch.Tests.Stubs
{
    public class TestInstaller:IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.Register(Component.For<IStore<Registration>>().ImplementedBy<FileSystemStore<Registration>>().Named("IStore.Registration.FileSystemStore"),
                               Component.For<IStore<Registration>>().ImplementedBy<MemoryStore<Registration>>().Named("IStore.Registration.MemoryStore"),
                               Component.For<IStore<Registration>>().ImplementedBy<DeffectiveStore<Registration>>().Named("IStore.Registration.DeffectiveStore"),
                               Component.For<IStore<Registration>>().ImplementedBy<DeffectiveGetStore<Registration>>().Named("IStore.Registration.DeffectiveGetStore"),
                               Component.For<IPublisher>().ImplementedBy<PushPublisher>().Named("IPublisher.Local"),
                               Component.For<ISubscriber>().ImplementedBy<Subscriber>().Named("ISubscriber.Local"),
                               Component.For<IPublisher>().ImplementedBy<PushPublisherNotPresent>().Named("IPublisher.NotPresent"),
                               Component.For<ISubscriber>().ImplementedBy<ChangeApplyerNotPresent>().Named("ISubscriber.NotPresent"),
                               Component.For<IPublisherProxy>().ImplementedBy<MockRemotePublisher>().Named("IPublisher.Remote"),
                               Component.For<ISubscriberProxy>().ImplementedBy<MockRemoteSubscriber>().Named("ISubscriber.Remote"),
                               Component.For<IPublisherProxy>().ImplementedBy<MockRemotePublisherNotPresent>().Named("IPublisher.Remote.NotPresent"),
                               Component.For<ISubscriberProxy>().ImplementedBy<MockRemoteSubscriberNotPresent>().Named("ISubscriber.Remote.NotPresent"));
        }
    }
}
