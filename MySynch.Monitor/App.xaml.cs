using System;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.ServiceModel;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using Hardcodet.Wpf.TaskbarNotification;
using MySynch.Common.Logging;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Monitor.MVVM.ViewModels;
using MySynch.Monitor.Utils;
using MySynch.Proxies.Autogenerated.Interfaces;

namespace MySynch.Monitor
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application,IBrokerMonitorCallback
    {
        private TaskbarIcon tb;
        private string _brokerUrl;
        private IBrokerMonitorProxy _brokerClient;
        private ListAllRegistrationsResponse _registeredComponents;

        private void InitApplication()
        {
            //initialize NotifyIcon
            tb = (TaskbarIcon)FindResource("MyNotifyIcon");
            tb.ToolTipText = "MySynch Monitor";
            tb.ShowBalloonTip("MySynch Monitor", "Starting the monitor", BalloonIcon.Info);
            StartTheMonitor();
            ((MenuItem)tb.ContextMenu.Items[0]).Command = new RelayCommand(CloseAll);
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;


        }

        private void CloseAll()
        {
            App.Current.Shutdown();
        }

        private void StartTheMonitor()
        {
            BackgroundWorker backgroundWorker= new BackgroundWorker();
            backgroundWorker.DoWork += DoWork;
            backgroundWorker.RunWorkerCompleted += RunWorkerCompleted;
            backgroundWorker.ProgressChanged += ProgressChanged;
            backgroundWorker.RunWorkerAsync();

        }

        private void ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            tb.HideBalloonTip();
            tb.ShowBalloonTip("Synch Monitor", e.UserState.ToString(), BalloonIcon.Info);
        }

        private void RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            Thread.Sleep(5000);
            tb.HideBalloonTip();
        }

        private void DoWork(object sender, DoWorkEventArgs e)
        {
            var key = ConfigurationManager.AppSettings.AllKeys.FirstOrDefault(k => k == "BrokerUrl");
            if (key != null)
                _brokerUrl = ConfigurationManager.AppSettings[key].ToString();
            else
                _brokerUrl = string.Empty;

            InstanceContext callbackInstance= new InstanceContext(this);
            _brokerClient = new ClientHelper().ConnectToADuplexBroker(ProgressChanged, _brokerUrl,callbackInstance);
            _brokerClient.ListAllregistrationsForDuplex();
            
        }

        protected override void OnStartup(StartupEventArgs e)
        {

            try
            {
                    InitApplication();
            }
            catch (Exception ex)
            {
                LoggingManager.LogMySynchSystemError(ex);
                InitApplication();
            }
        }

        public void ListAllRegistrationsCallback(string somethingback)
        {
            ProgressChanged(this,new ProgressChangedEventArgs(0,somethingback));
        }
    }
}
