using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.ServiceModel;
using System.Windows;
using System.Windows.Controls;
using Hardcodet.Wpf.TaskbarNotification;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Monitor.MVVM.ViewModels;
using MySynch.Monitor.Utils;
using MySynch.Proxies.Autogenerated.Interfaces;
using Sciendo.Common.Logging;

namespace MySynch.Monitor
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application,IBrokerMonitorCallback
    {
        private TaskbarIcon tb;
        private string _brokerUrl;
        private IBrokerMonitorProxy _brokerClient;
        private BackgroundWorker backgroundWorker;

        private void InitApplication()
        {
            //initialize NotifyIcon
            tb = (TaskbarIcon)FindResource("MyNotifyIcon");
            tb.ToolTipText = "MySynch Monitor. Hover over to check latest activity.";
            tb.ShowBalloonTip("MySynch Monitor", "Starting Monitor", BalloonIcon.Info);
            var popupControl = new NotifyPopupControl();
            var model = new NotifyViewModel();
            model.ListAllMessages=new ObservableCollection<GenericMessageModel>();
            model.ListActiveRegistrations= new ObservableCollection<RegistrationModel>();
            model.ListAllMessages.Add(new GenericMessageModel{Message="Start Monitoring", Source=ComponentType.None});
            popupControl.DataContext = model;
            tb.TrayPopup = popupControl;
            StartTheMonitor();
            ((MenuItem)tb.ContextMenu.Items[0]).Command = new RelayCommand(CloseAll);
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
        }

        private void CloseAll()
        {
            App.Current.Shutdown();
        }

        private void StartTheMonitor()
        {
            backgroundWorker= new BackgroundWorker();
            backgroundWorker.DoWork += DoWork;
            backgroundWorker.RunWorkerCompleted += RunWorkerCompleted;
            backgroundWorker.ProgressChanged += ProgressChanged;
            backgroundWorker.WorkerSupportsCancellation = true;
            backgroundWorker.RunWorkerAsync();

        }

        private void ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            tb.HideBalloonTip();
            tb.ShowBalloonTip("Synch Monitor", ((GenericMessageModel)e.UserState).Message, BalloonIcon.Info);
            Dispatcher.Invoke((Action) (() =>
                                            {
                                                ((NotifyViewModel) ((NotifyPopupControl) tb.TrayPopup).DataContext).ListAllMessages.Add((GenericMessageModel)e.UserState);
                                            }));

        }

        private void RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            tb.HideBalloonTip();
        }

        private void DoWork(object sender, DoWorkEventArgs e)
        {
            var key = ConfigurationManager.AppSettings.AllKeys.FirstOrDefault(k => k == "BrokerUrl");
            if (key != null)
                _brokerUrl = ConfigurationManager.AppSettings[key].ToString();
            else
                _brokerUrl = string.Empty;

            InstanceContext callbackInstance= new InstanceContext(this);
            _brokerClient = new ClientHelper().ConnectToADuplexBroker(ProgressChanged, _brokerUrl, callbackInstance);
            var message = "Retrieving registrations active at: " + _brokerUrl;
            ProgressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel { Message = message, Source = ComponentType.Broker }));

            _brokerClient.StartMonitoring();
            RecordRegistrations();
            message = "Registrations retrieved.";
            ProgressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel { Message = message, Source = ComponentType.Broker }));
            message = "Retrieveing messages already at: " + _brokerUrl;
            ProgressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel { Message = message, Source = ComponentType.Broker }));

            RecordMessages();
            message = "Messages retrieved.";
            ProgressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel { Message = message, Source = ComponentType.Broker }));
            while (true) ;

        }

        private void RecordMessages()
        {
            Dispatcher.Invoke((Action)(() =>
                                           {
                                               var msgs =
                                                   ClientHelper.ConvertToObservableCollection(
                                                       _brokerClient.ListAllMessages().AvailableMessages);
                                               ((NotifyViewModel)((NotifyPopupControl)tb.TrayPopup).DataContext).
                                                   ListActiveMessages =msgs;
                                           }));
        }

        protected override void OnStartup(StartupEventArgs e)
        {

            try
            {
                    InitApplication();
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
                InitApplication();
            }
        }

        public void NotifyNewRegistration(Registration changedRegistration)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordRegistrationAndBuildMessage(changedRegistration, true)));
        }

        private GenericMessageModel RecordRegistrationAndBuildMessage(Registration changedRegistration, bool added)
        {
            var message=string.Format("{0} {1} identified by url: {2}", (added) ? "Attached" : "Detached",
                                 changedRegistration.ServiceRole, changedRegistration.ServiceUrl);
            RecordRegistrations();

            return new GenericMessageModel
                       {
                           Message = message,
                           Source = ClientHelper.ConvertToComponentType(changedRegistration.ServiceRole)
                       };
        }

        private void RecordRegistrations()
        {
            Dispatcher.Invoke((Action)(() =>
                                           {
                                               var regs = ClientHelper.ConvertToObservableCollection(_brokerClient.ListAllRegistrations().Registrations);
                                               ((NotifyViewModel) ((NotifyPopupControl) tb.TrayPopup).DataContext).
                                                       ListActiveRegistrations.Clear();
                                               if (regs != null || regs.Count() > 0)
                                               {
                                                   foreach (var reg in regs)
                                                       ((NotifyViewModel)
                                                        ((NotifyPopupControl) tb.TrayPopup).DataContext).
                                                           ListActiveRegistrations.Add(reg);
                                               }
                                           }));
        }

        public void NotifyRemoveRegistration(Registration changedRegistration)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordRegistrationAndBuildMessage(changedRegistration,false)));
        }

        public void NotifyNewMessage(MessageWithDestinations msg)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(msg, false)));
        }

        public void NotifyMessageUpdate(MessageWithDestinations msg)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(msg, false)));
        }

        public void NotifyMessageDelete(MessageWithDestinations deletedMessage)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(deletedMessage,true)));
        }

        private GenericMessageModel RecordMessageFlowAndBuildMessage(MessageWithDestinations messageWithDestinations, bool deleteMessage)
        {
            var message= string.Format("{0} of file {1} from source {2} distributed to: {3}.\r\n {4}", messageWithDestinations.OperationType, messageWithDestinations.AbsolutePath,
                                 messageWithDestinations.SourceOfMessageUrl,
                                 string.Join("\r\n",
                                             messageWithDestinations.Destinations.Select(
                                                 d =>
                                                 string.Format("{0} by subscriber:{1}",
                                                               (d.Processed) ? "processed" : "not processed", d.Url))),(deleteMessage)?"Completed for all.":"");
            RecordMessages();
            return new GenericMessageModel {Message = message, Source = ComponentType.Broker};
        }
    }
}
