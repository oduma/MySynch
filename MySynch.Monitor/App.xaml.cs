using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.ServiceModel;
using System.Windows;
using System.Windows.Controls;
using Hardcodet.Wpf.TaskbarNotification;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Monitor.MVVM.Models;
using MySynch.Monitor.MVVM.ViewModels;
using MySynch.Monitor.Utils;
using MySynch.Proxies.Autogenerated.Interfaces;
using Sciendo.Common.Logging;

namespace MySynch.Monitor
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application,IBrokerMonitorCallback,IComponentMonitorCallback
    {
        private TaskbarIcon tb;
        private string _brokerUrl;
        private IBrokerMonitorProxy _brokerMonitorClient;
        private BackgroundWorker backgroundWorker;
        private IComponentMonitorProxy _subscriberMonitorClient;
        private IComponentMonitorProxy _publisherMonitorClient;
        private string _subscriberUrl;
        private string _publisherUrl;

        private void InitApplication()
        {
            _brokerUrl = GetConfigurationValue("BrokerMonitorInstanceName");
            _subscriberUrl = GetConfigurationValue("SubscriberMonitorInstanceName");
            _publisherUrl = GetConfigurationValue("PublisherMonitorInstanceName");

            //initialize NotifyIcon
            tb = (TaskbarIcon)FindResource("MyNotifyIcon");
            tb.ToolTipText = "MySynch Monitor. Click to check latest activity.";
            tb.ShowBalloonTip("MySynch Monitor", "Starting Monitor", BalloonIcon.Info);
            var popupControl = new NotifyPopupControl();
            var model = new NotifyViewModel();
            model.ListAllMessages=new ObservableCollection<NotificationModel>();
            var monitoringTargetMessage = string.Format("{0}{1}{2}", (!string.IsNullOrEmpty(_brokerUrl)) ? "Broker, " : "",
                                                        (!string.IsNullOrEmpty(_subscriberUrl)) ? "Subscriber, " : "",
                                                        (!string.IsNullOrEmpty(_publisherUrl)) ? "Publisher" : "");
            monitoringTargetMessage = (string.IsNullOrEmpty(monitoringTargetMessage))
                                          ? "Nothing to monitor"
                                          : ((monitoringTargetMessage.EndsWith(", "))
                                                 ? monitoringTargetMessage.Substring(0,
                                                                                     monitoringTargetMessage.Length - 2)
                                                 : monitoringTargetMessage);
            model.ListAllMessages.Add(new NotificationModel { DateOfEvent = DateTime.Now, Message = "Start Monitoring " + monitoringTargetMessage, Source = ComponentType.None });
            if(string.IsNullOrEmpty(_brokerUrl))
                model.BrokerVisible = Visibility.Hidden;
            model.ListActiveRegistrations = new ObservableCollection<RegistrationModel>();
            model.ListActiveMessages = new ObservableCollection<MessageModel>();
            popupControl.DataContext = model;
            tb.TrayPopup = popupControl;
            StartTheMonitor();
            ((MenuItem)tb.ContextMenu.Items[0]).Command = new RelayCommand(CloseAll);
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
        }

        private void CloseAll()
        {
            App.Current.Shutdown();
        }

        private void StartTheMonitor()
        {
            backgroundWorker= new BackgroundWorker();
            backgroundWorker.DoWork += DoWork;
            backgroundWorker.RunWorkerCompleted += RunWorkerCompleted;
            backgroundWorker.ProgressChanged += ProgressChanged;
            backgroundWorker.WorkerSupportsCancellation = true;
            backgroundWorker.RunWorkerAsync();

        }

        private void ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            tb.HideBalloonTip();
            tb.ShowBalloonTip("Synch Monitor", ((NotificationModel)e.UserState).Message, BalloonIcon.Info);
            Dispatcher.Invoke((Action) (() =>
                                            {
                                                ((NotifyViewModel) ((NotifyPopupControl) tb.TrayPopup).DataContext).ListAllMessages.Add((NotificationModel)e.UserState);
                                            }));

        }

        private void RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            tb.HideBalloonTip();
        }

        private void DoWork(object sender, DoWorkEventArgs e)
        {

            InstanceContext callbackInstance= new InstanceContext(this);
            _brokerMonitorClient = ClientHelper.ConnectToADuplexBroker(ProgressChanged, _brokerUrl, callbackInstance);
            if(_brokerMonitorClient!=null)
                _brokerMonitorClient.StartMonitoring();

            _subscriberMonitorClient = ClientHelper.ConnectToADuplexComponentAndStartMonitoring(ProgressChanged, _subscriberUrl,
                                                                                   callbackInstance,
                                                                                   ServiceRole.Subscriber);
            _publisherMonitorClient = ClientHelper.ConnectToADuplexComponentAndStartMonitoring(ProgressChanged, _publisherUrl,
                                                                 callbackInstance,ServiceRole.Publisher);
            if (_brokerMonitorClient != null)
            {
                var message = "Retrieving registrations active at: " + _brokerUrl;
                ProgressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker }));

                RecordRegistrations(_brokerMonitorClient.ListAllRegistrations().Registrations);
                message = "Registrations retrieved.";
                ProgressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker }));
                message = "Retrieveing messages already at: " + _brokerUrl;
                ProgressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker }));

                RecordMessages(_brokerMonitorClient.ListAllMessages().AvailableMessages);
                message = "Messages retrieved.";
                ProgressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker }));
            }
//            while (true) ;
        }

        private string GetConfigurationValue(string configKey)
        {
            var value = string.Empty;
            var key = ConfigurationManager.AppSettings.AllKeys.FirstOrDefault(k => k == configKey);
            if (key != null)
                value= ConfigurationManager.AppSettings[key].ToString();
            if(string.IsNullOrEmpty(value))
                return string.Empty;
            return string.Format("http://{0}/{1}", System.Net.Dns.GetHostName().ToLower(), value);
        }

        protected override void OnStartup(StartupEventArgs e)
        {

            try
            {
                    InitApplication();
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
                InitApplication();
            }
        }

        public void NotifyNewRegistration(Registration changedRegistration, List<Registration> registrations)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordRegistrationAndBuildMessage(changedRegistration, true, registrations)));
        }

        private NotificationModel RecordRegistrationAndBuildMessage(Registration changedRegistration, bool added,List<Registration> registrations)
        {
            var message=string.Format("{0} {1} identified by url: {2}", (added) ? "Attached" : "Detached",
                                 changedRegistration.ServiceRole, changedRegistration.ServiceUrl);
            RecordRegistrations(registrations);

            return new NotificationModel
                       {
                           DateOfEvent = DateTime.Now,
                           Message = message,
                           Source = ClientHelper.ConvertToComponentType(changedRegistration.ServiceRole)
                       };
        }

        private void RecordRegistrations(IEnumerable<Registration> registrations)
        {
            Dispatcher.Invoke((Action)(() =>
                                           {
                                               var regs = ClientHelper.ConvertToRegistrations(registrations);
                                               ((NotifyViewModel) ((NotifyPopupControl) tb.TrayPopup).DataContext).
                                                       ListActiveRegistrations.Clear();
                                               if (regs != null || regs.Count() > 0)
                                               {
                                                   foreach (var reg in regs)
                                                       ((NotifyViewModel)
                                                        ((NotifyPopupControl) tb.TrayPopup).DataContext).
                                                           ListActiveRegistrations.Add(reg);
                                               }
                                           }));
        }


        private void RecordMessages(IEnumerable<MessageWithDestinations> messages)
        {
            Dispatcher.Invoke((Action)(() =>
            {
                var msgs =
                    ClientHelper.ConvertToMessageModels(messages);
                ((NotifyViewModel) ((NotifyPopupControl) tb.TrayPopup).DataContext).
                    ListActiveMessages.Clear();
                if(msgs!=null || msgs.Count()>0)
                    foreach(var msg in msgs)
                        ((NotifyViewModel)((NotifyPopupControl)tb.TrayPopup).DataContext).
                            ListActiveMessages.Add(msg);
            }));
        }


        private void RecordMessage(NotificationModel message)
        {
            Dispatcher.Invoke((Action)(() =>
            {
                ((NotifyViewModel)((NotifyPopupControl)tb.TrayPopup).DataContext).
                    ListAllMessages.Add(message);
            }));
        }

        public void NotifyRemoveRegistration(Registration changedRegistration, List<Registration> registrations)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordRegistrationAndBuildMessage(changedRegistration,false, registrations)));
        }

        public void NotifyNewMessage(MessageWithDestinations msg, List<MessageWithDestinations> messages)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(msg, false,messages)));
        }

        public void NotifyMessageUpdate(MessageWithDestinations msg, List<MessageWithDestinations> messages)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(msg, false, messages)));
        }

        public void NotifyMessageDelete(MessageWithDestinations deletedMessage,List<MessageWithDestinations> messages)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordMessageFlowAndBuildMessage(deletedMessage,true,messages)));
        }

        private NotificationModel RecordMessageFlowAndBuildMessage(MessageWithDestinations messageWithDestinations, bool deleteMessage, List<MessageWithDestinations> messages)
        {
            var message= string.Format("{0} of file {1} from source {2} distributed to: {3}.\r\n {4}", messageWithDestinations.OperationType, messageWithDestinations.AbsolutePath,
                                 messageWithDestinations.SourceOfMessageUrl,
                                 string.Join("\r\n",
                                             messageWithDestinations.Destinations.Select(
                                                 d =>
                                                 string.Format("{0} by subscriber:{1}",
                                                               (d.Processed) ? "processed" : "not processed", d.Url))),(deleteMessage)?"Completed for all.":"");
            RecordMessages(messages);
            return new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker };
        }

        public void NotifyActivity(PublisherMessage activityMessage, ServiceRole serverRole)
        {
            ProgressChanged(this, new ProgressChangedEventArgs(0, RecordActivityMessageAndBuildMessage(activityMessage, serverRole)));
        }

        private NotificationModel RecordActivityMessageAndBuildMessage(PublisherMessage activityMessage,ServiceRole serverRole)
        {
            var message = string.Format("{0} of file {1} {2}", activityMessage.OperationType, activityMessage.AbsolutePath,
    (serverRole == ServiceRole.Publisher) ? "sent by " + _publisherUrl : "received by " + _subscriberUrl);
            var notificationMessage=new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker };
            RecordMessage(notificationMessage);
            return notificationMessage;

        }
    }
}
