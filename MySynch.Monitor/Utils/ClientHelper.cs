using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ServiceModel;
using MySynch.Contracts.Messages;
using MySynch.Monitor.MVVM.Models;
using MySynch.Proxies.Autogenerated.Implementations;
using MySynch.Proxies.Autogenerated.Interfaces;
using System.Linq;

namespace MySynch.Monitor.Utils
{
    public class ClientHelper
    {
        internal IBrokerMonitorProxy ConnectToADuplexBroker(EventHandler<ProgressChangedEventArgs> progressChanged, string brokerMonitorUrl, InstanceContext callbackInstance)
        {
            var message = "Connecting to Broker monitor: " + brokerMonitorUrl;
            progressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel{DateOfEvent = DateTime.Now, Message=message, Source=ComponentType.Broker}));
            IBrokerMonitorProxy brokerClient = new BrokerMonitorClient();
            brokerClient.InitiateDuplexUsingServerAddress(brokerMonitorUrl,callbackInstance);
            message = "Connected to Broker monitor: " + brokerMonitorUrl;
            progressChanged(this, new ProgressChangedEventArgs(0, new NotificationModel { DateOfEvent = DateTime.Now, Message = message, Source = ComponentType.Broker }));
            return brokerClient;
        }

        public static ComponentType ConvertToComponentType(ServiceRole serviceRole)
        {
            return (serviceRole == ServiceRole.Subscriber) ? ComponentType.Subscriber : ComponentType.Publisher;
        }

        internal static IEnumerable<RegistrationModel> ConvertToRegistrations(IEnumerable<Registration> registrations)
        {
            if (registrations == null)
                return new List<RegistrationModel>();
            return registrations.Select(r=>new RegistrationModel
                {
                    Operations =
                        string.Join(",",
                                    r.OperationTypes.Select(o => o.ToString())),
                    ServiceRole = r.ServiceRole,
                    ServiceUrl = r.ServiceUrl
                });
        }

        internal static IEnumerable<MessageModel> ConvertToMessageModels(IEnumerable<MessageWithDestinations> messages)
        {
            if (messages == null)
                return new List<MessageModel>();
            return messages.SelectMany(m => m.Destinations,
                                (m, d) =>
                                new MessageModel
                                    {
                                        File = m.AbsolutePath,
                                        FromUrl = m.SourceOfMessageUrl,
                                        MessageId = m.MessageId,
                                        OperationType = m.OperationType,
                                        Processed = d.Processed,
                                        ToUrl = d.Url
                                    });
        }

    }
}
