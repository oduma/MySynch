using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ServiceModel;
using System.Windows.Threading;
using MySynch.Contracts.Messages;
using MySynch.Monitor.MVVM.ViewModels;
using MySynch.Proxies.Autogenerated.Implementations;
using MySynch.Proxies.Autogenerated.Interfaces;

namespace MySynch.Monitor.Utils
{
    public class ClientHelper
    {
        internal IBrokerMonitorProxy ConnectToADuplexBroker(EventHandler<ProgressChangedEventArgs> progressChanged, string brokerMonitorUrl, InstanceContext callbackInstance)
        {
            var message = "Connecting to Broker monitor: " + brokerMonitorUrl;
            progressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel{Message=message, Source=ComponentType.Broker}));
            IBrokerMonitorProxy brokerClient = new BrokerMonitorClient();
            brokerClient.InitiateDuplexUsingServerAddress(brokerMonitorUrl,callbackInstance);
            message = "Connected to Broker monitor: " + brokerMonitorUrl;
            progressChanged(this, new ProgressChangedEventArgs(0, new GenericMessageModel{Message=message,Source=ComponentType.Broker}));
            return brokerClient;
        }

        public static ComponentType ConvertToComponentType(ServiceRole serviceRole)
        {
            return (serviceRole == ServiceRole.Subscriber) ? ComponentType.Subscriber : ComponentType.Publisher;
        }

        
    }
}
