<#+
// <copyright file="ClientTemplate.tt" company="HP">
//  Copyright © HP. All Rights Reserved.
// </copyright>

public class ClientTemplate : Template
{
	public Type ContractInterface {get;set;}
	public override string TransformText()
	{
		#>
//This code was auto generated with a tool
//do not change this file
using System;
using System.ServiceModel;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core.WCF.Clients.Discovery;
using MySynch.Proxies.Interfaces;

namespace MySynch.Proxies
{
	public class <#= ContractInterface.Name.Substring(1,ContractInterface.Name.Length-1)#>Client :BaseClient<<#= ContractInterface.Name #>>,<#= ContractInterface.Name #>Proxy
	{
<#+
		List<MethodInfo> methods=ContractInterface.GetInterfaces().SelectMany(i=>i.GetMethods()).ToList();
		methods.AddRange(ContractInterface.GetMethods());
		foreach(MethodInfo method in methods)
		{
			var returnType=method.ReturnType;
			var parametersWithtypes=string.Join(", ", method.GetParameters().Select(p => p.ParameterType.FullName + " " + p.Name));
			var listForDef=(string.IsNullOrEmpty(parametersWithtypes))?"()":"("+parametersWithtypes +")";
			var parametersPlain=string.Join(", ",method.GetParameters().Select(p => p.Name));
			var listForCall=(string.IsNullOrEmpty(parametersPlain))?"()":"("+parametersPlain +")";
			var returnTypeName=(returnType.Name=="Void")?"void":returnType.FullName;
#>
		public <#= returnTypeName#> <#=  method.Name #><#= listForDef #> 
		{
		<#= (returnType.Name=="Void")?string.Empty:returnType.FullName + " response = new " + returnType.FullName + "();"#> 
		try
		{
		                using (new OperationContextScope((IContextChannel)Proxy))
                {
				<#= (returnType.Name=="Void")?string.Empty:" response = "#> 
					Proxy.<#=  method.Name #><#= listForCall #>;
				}
		}
		catch (CommunicationException e)
            {
                OnCommunicationException(e);
            }
            catch (TimeoutException e)
            {
                OnTimeoutException(e);
            }
            catch (Exception e)
            {
                OnException(e);
            }

			return <#= (returnType.Name=="Void")?string.Empty:" response"#>; 

		}
<#+
		} 
		 #>
	}
}
		<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
