<#@ template language="C#v4.0" hostspecific="True" debug="True" #>
<#@ include file="T4Toolbox.tt" #>
<#@ VolatileAssembly processor="T4Toolbox.VolatileAssemblyProcessor" Name="$(SolutionDir)\Assemblies\MySynch.Contracts.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.ServiceModel.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #> 
<#@ import namespace="MySynch.Contracts"#> 
<#
	var contractsAssembly=AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a=>a.GetName().Name=="MySynch.Contracts");
	if(contractsAssembly!=null)
    {
		var interfaces=contractsAssembly.GetTypes().Where(t=>t.IsInterface && t.GetCustomAttributes(typeof(System.ServiceModel.ServiceContractAttribute),false).Count()>0);
		var notUsedInterfaces= interfaces.Select(i=>i.Name).Except(interfaces.SelectMany(t=>t.GetInterfaces()).Select(t=>t.Name).Distinct());
		foreach(var interfaceType in notUsedInterfaces)
        {
			ClientTemplate t = new ClientTemplate();
			t.ContractInterface=contractsAssembly.GetTypes().First(i=>i.IsInterface && i.Name==interfaceType);
			t.Output.File=interfaceType.Substring(1,interfaceType.Length-1) + "Client.cs";
			t.Render();

        }
    }
#>
<#+
// <copyright file="ClientTemplate.tt" company="HP">
//  Copyright © HP. All Rights Reserved.
// </copyright>

public class ClientTemplate : Template
{
	public Type ContractInterface {get;set;}
	public override string TransformText()
	{
		#>
//This code was auto generated with a tool
//do not change this file
using System;
using System.ServiceModel;
using MySynch.Contracts;
using Sciendo.Common.WCF;
using Sciendo.Common.WCF.Clients;
using MySynch.Proxies.Autogenerated.Interfaces;
using System.ServiceModel.Description;
using System.Collections.Generic;


namespace MySynch.Proxies.Autogenerated.Implementations
{
	public class <#= ContractInterface.Name.Substring(1,ContractInterface.Name.Length-1)#>Client :BaseClient<<#= ContractInterface.Name #>>,<#= ContractInterface.Name #>Proxy
	{
		protected override System.Collections.Generic.List<System.ServiceModel.Description.IEndpointBehavior> GetEndpointBehaviors()
        {
            return new List<IEndpointBehavior>
			{
			<#+
				var customClientAttributes = ContractInterface.GetCustomAttributes(typeof(MySynch.Contracts.ApplyCustomClientBehavior),false); 
				if(customClientAttributes.Count()>0)
                {
			#>
				new MySynch.Common.WCF.MySynchCustomBehavior(),
				<#+ } #>
				new SciendoAuditBehavior()
			};
        }

<#+
		List<MethodInfo> methods=ContractInterface.GetInterfaces().SelectMany(i=>i.GetMethods()).ToList();
		methods.AddRange(ContractInterface.GetMethods());
		foreach(MethodInfo method in methods)
		{
			var returnType=method.ReturnType;
			var parametersWithtypes=string.Join(", ", method.GetParameters().Select(p => p.ParameterType.FullName + " " + p.Name));
			var listForDef=(string.IsNullOrEmpty(parametersWithtypes))?"()":"("+parametersWithtypes +")";
			var parametersPlain=string.Join(", ",method.GetParameters().Select(p => p.Name));
			var listForCall=(string.IsNullOrEmpty(parametersPlain))?"()":"("+parametersPlain +")";
			var returnTypeName=(returnType.Name=="Void")?"void":returnType.FullName;
#>
		public <#= returnTypeName#> <#=  method.Name #><#= listForDef #> 
		{
		<#= (returnType.Name=="Void")?string.Empty:returnType.FullName + " response = new " + returnType.FullName + "();"#> 
		try
		{
		                using (new OperationContextScope((IContextChannel)Proxy))
                {
				<#= (returnType.Name=="Void")?string.Empty:" response = "#> 
					Proxy.<#=  method.Name #><#= listForCall #>;
				}
		}
		catch (CommunicationException e)
            {
                OnCommunicationException(e);
            }
            catch (TimeoutException e)
            {
                OnTimeoutException(e);
            }
            catch (Exception e)
            {
                OnException(e);
            }

			return <#= (returnType.Name=="Void")?string.Empty:" response"#>; 

		}
<#+
		} 
		 #>
	}
}
		<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
