using System;
using System.Collections.Generic;
using System.IO;
using System.ServiceModel;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core.Configuration;
using MySynch.Core.Interfaces;
using MySynch.Proxies.Autogenerated.Interfaces;
using Sciendo.Common.IOC;
using Sciendo.Common.Logging;

namespace MySynch.Core.Subscriber
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class Subscriber : ILocalComponent, ISubscriber
    {
        private string _targetRootFolder;
        private IBrokerProxy _brokerClient;
        private object _lock = new object();
        private ComponentResolver _componentResolver;
        private string _runningHostUrl;
        private IComponentMonitorCallback _callback;

        internal SortedList<string, CopyStrategy> InitiatedCopyStrategies { get; set; }

        public Subscriber(ComponentResolver componentResolver)
        {
            InitiatedCopyStrategies = new SortedList<string, CopyStrategy>();
            _componentResolver = componentResolver;
        }

        internal ReceiveMessageResponse TryApplyChange(PublisherMessage message)
        {
            switch (message.OperationType)
            {
                case OperationType.Insert:
                case OperationType.Update:
                    return ApplyUpsert(message, _targetRootFolder);
                case OperationType.Delete:
                    return ApplyDelete(message, _targetRootFolder);
                case OperationType.Rename:
                    return ApplyRename(message, _targetRootFolder);
                default:
                    return null;
            }
        }

        private ReceiveMessageResponse ApplyRename(PublisherMessage message, string targetRootFolder)
        {
            LoggingManager.Debug("Applying rename to " + targetRootFolder);
            var localfromFileName = message.AbsolutePath.Replace(
                message.SourcePathRootName, targetRootFolder);
            var localToFileName = message.RenameToAbsolutePath.Replace(message.SourcePathRootName, targetRootFolder);
            var response = new ReceiveMessageResponse
            {
                Success = false
            };

            try
            {
                if (!File.Exists(localfromFileName) && !File.Exists(localToFileName))
                {
                    message.OperationType = OperationType.Insert;
                    message.AbsolutePath = message.RenameToAbsolutePath;
                    return ApplyUpsert(message, targetRootFolder);
                }
                if (!File.Exists(localfromFileName) && File.Exists(localToFileName))
                {
                    message.OperationType = OperationType.Update;
                    message.AbsolutePath = message.RenameToAbsolutePath;
                    return ApplyUpsert(message, targetRootFolder);
                }
                File.Copy(localfromFileName,localToFileName,true);
                File.Delete(localfromFileName);
                response.Success = true;
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
                response.Success = false;
            }
            LoggingManager.Debug("Apply rename returns " + response.Success);

            return response;

        }

        private ReceiveMessageResponse ApplyDelete(PublisherMessage message, string targetRootFolder)
        {
            LoggingManager.Debug("Applying delete to " + targetRootFolder);
            var localDeleteFileName = message.AbsolutePath.Replace(
                message.SourcePathRootName, targetRootFolder);
            var response = new ReceiveMessageResponse
                               {
                                   Success = false
                               };

            try
            {
                if (File.Exists(localDeleteFileName))
                    File.Delete(localDeleteFileName);
                response.Success = true;
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
                response.Success = false;
            }
            LoggingManager.Debug("Apply deletes returns " + response.Success);

            return response;
        }

        private ReceiveMessageResponse ApplyUpsert(PublisherMessage message, string targetRootFolder)
        {
            LoggingManager.Debug("Applying upsert from " + message.SourcePathRootName + " to " + targetRootFolder);
            var localFileName = Path.Combine(targetRootFolder,
                                             message.AbsolutePath.Replace(
                                                 message.SourcePathRootName, ""));
            var copyStrategy = GetOrCreateCopyStrategy(message.SourceOfMessageUrl);
            return new ReceiveMessageResponse
                       {
                           Success =
                               copyStrategy.Copy(message.AbsolutePath,
                                                 localFileName)
                       };
        }

        internal CopyStrategy GetOrCreateCopyStrategy(string sourceOfMessageUrl)
        {
            lock (_lock)
            {
                if (InitiatedCopyStrategies == null)
                    InitiatedCopyStrategies = new SortedList<string, CopyStrategy>();
                if (InitiatedCopyStrategies.ContainsKey(sourceOfMessageUrl))
                    return InitiatedCopyStrategies[sourceOfMessageUrl];
                var copyStrategy = new CopyStrategy();

                var sourceOfDataClient = GetSourceOfData(sourceOfMessageUrl);
                copyStrategy.Initialize(sourceOfDataClient);
                InitiatedCopyStrategies.Add(sourceOfMessageUrl, copyStrategy);
                return copyStrategy;
            }
        }

        private IPublisher GetSourceOfData(string sourceOfMessageUrl)
        {
            IPublisherProxy publisherProxy = _componentResolver.Resolve<IPublisherProxy>("IPublisher.Remote");
            publisherProxy.InitiateUsingServerAddress(sourceOfMessageUrl);
            return publisherProxy;
        }

        public virtual void Initialize(IBrokerProxy brokerClient,
                                       MySynchLocalComponentConfigurationSection localComponentConfig, string hostUrl)
        {
            if (localComponentConfig == null || string.IsNullOrEmpty(localComponentConfig.LocalRootFolder) ||
                !Directory.Exists(localComponentConfig.LocalRootFolder))
                throw new ArgumentException("localRootFolder");
            _targetRootFolder = localComponentConfig.LocalRootFolder;
            _brokerClient = brokerClient;
            _runningHostUrl = hostUrl;
        }

        public void Close(object objectState = null)
        {
            return;
        }

        public virtual GetHeartbeatResponse GetHeartbeat()
        {
            LoggingManager.Debug("GetHeartbeat will return true.");
            return new GetHeartbeatResponse {Status = true, RootPath = _targetRootFolder};
        }

        public void StartMonitoring()
        {
            _callback = OperationContext.Current.GetCallbackChannel<IComponentMonitorCallback>();
        }

        public ReceiveMessageResponse ReceiveMessage(ReceiveMessageRequest request)
        {
            LoggingManager.Debug("Trying to apply a change to: " + _targetRootFolder);

            if (request == null || request.PublisherMessage == null)
            {
                throw new ArgumentNullException("PublisherMessage");
            }
            if (string.IsNullOrEmpty(request.PublisherMessage.AbsolutePath))
                return new ReceiveMessageResponse {Success = false};
            var result = TryApplyChange(request.PublisherMessage);
            if(_callback!=null)
                _callback.NotifyActivity(request.PublisherMessage,ServiceRole.Subscriber);
            if (!result.Success)
                return result;
            try
            {
                MessageReceivedFeedbackRequest feedbackRequest = new MessageReceivedFeedbackRequest
                                                                     {
                                                                         PackageId = request.PublisherMessage.MessageId,
                                                                         DestinationUrl = _runningHostUrl
                                                                     };
                _brokerClient.MessageReceivedFeedback(feedbackRequest);
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
            }
            return result;
        }
    }
}