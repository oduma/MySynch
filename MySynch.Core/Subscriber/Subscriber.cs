using System;
using System.Collections.Generic;
using System.IO;
using System.ServiceModel;
using MySynch.Common.Logging;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core.DataTypes;
using MySynch.Core.Interfaces;
using MySynch.Proxies.Autogenerated.Interfaces;

namespace MySynch.Core.Subscriber
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class Subscriber:ILocalComponent,ISubscriber
    {
        private string _targetRootFolder;
        private IBrokerProxy _brokerClient;
        private object _lock= new object();
        private MySynchComponentResolver _componentResolver;

        internal SortedList<string, ICopyStrategy> InitiatedCopyStrategies { get; set; }

        public Subscriber( MySynchComponentResolver componentResolver)
        {
            InitiatedCopyStrategies=new SortedList<string, ICopyStrategy>();
            _componentResolver = componentResolver;
        }

        internal ReceiveMessageResponse TryApplyChange(PublisherMessage message)
        {
            return (message.OperationType != OperationType.Delete)
                ? ApplyUpsert(message, _targetRootFolder)
                : ApplyDelete(message, _targetRootFolder);
        }

        private ReceiveMessageResponse ApplyDelete(PublisherMessage message, string targetRootFolder)
        {
            LoggingManager.Debug("Applying delete to " + targetRootFolder);
            var localDeleteFileName = message.AbsolutePath.Replace(
                message.SourcePathRootName, targetRootFolder);
            var response = new ReceiveMessageResponse
                               {
                                   Success = false
                               };

            try
            {
                if (File.Exists(localDeleteFileName))
                    File.Delete(localDeleteFileName);
                response.Success = true;
            }
            catch (Exception ex)
            {
                LoggingManager.LogMySynchSystemError(ex);
                response.Success = false;
            }
            LoggingManager.Debug("Apply deletes returns " + response.Success);

            return response;
        }

        private ReceiveMessageResponse ApplyUpsert(PublisherMessage message, string targetRootFolder)
        {
            LoggingManager.Debug("Applying upsert from " + message.SourcePathRootName + " to " + targetRootFolder);
            var localFileName = Path.Combine(targetRootFolder,
                                             message.AbsolutePath.Replace(
                                                     message.SourcePathRootName, ""));
            var copyStrategy = GetOrCreateCopyStrategy(message.SourceOfMessageUrl);
            return new ReceiveMessageResponse
                       {
                           Success =
                               copyStrategy.Copy(message.AbsolutePath,
                                                  localFileName)
                       };
        }

        private ICopyStrategy GetOrCreateCopyStrategy(string sourceOfMessageUrl)
        {
            lock (_lock)
            {
                if (InitiatedCopyStrategies.ContainsKey(sourceOfMessageUrl))
                    return InitiatedCopyStrategies[sourceOfMessageUrl];
                var copyStrategy = new CopyStrategy();

                var sourceOfDataClient = GetSourceOfData(sourceOfMessageUrl);
                copyStrategy.Initialize(sourceOfDataClient);
                InitiatedCopyStrategies.Add(sourceOfMessageUrl, copyStrategy);
                return copyStrategy;
            }
        }

        private IPublisher GetSourceOfData(string sourceOfMessageUrl)
        {
            IPublisherProxy publisherProxy = _componentResolver.Resolve<IPublisherProxy>("IPublisher.Remote");
            publisherProxy.InitiateUsingServerAddress(sourceOfMessageUrl);
            return publisherProxy;
        }

        public virtual void Initialize(IBrokerProxy brokerClient, LocalComponentConfig localComponentConfig, string hostUrl)
        {
            if (string.IsNullOrEmpty(localComponentConfig.RootFolder))
                throw new ArgumentNullException("localRootFolder");
            _targetRootFolder = localComponentConfig.RootFolder;
            _brokerClient = brokerClient;
        }

        public void Close(object objectState=null)
        {
            return;
        }

        public virtual GetHeartbeatResponse GetHeartbeat()
        {
            LoggingManager.Debug("GetHeartbeat will return true.");
            return new GetHeartbeatResponse {Status = true,RootPath=_targetRootFolder};
        }

        public ReceiveMessageResponse ReceiveMessage(ReceiveMessageRequest request)
        {
            LoggingManager.Debug("Trying to apply a change to: " + _targetRootFolder);

            if (request == null || request.PublisherMessage == null)
            {
                throw new ArgumentNullException("PublisherMessage");
            }
            if (string.IsNullOrEmpty(request.PublisherMessage.AbsolutePath))
                return new ReceiveMessageResponse { Success = false };
            return TryApplyChange(request.PublisherMessage);
        }
    }
}
