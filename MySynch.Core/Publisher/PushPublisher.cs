using System;
using System.Collections.Generic;
using System.IO;
using System.ServiceModel;
using System.Threading;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core.Configuration;
using MySynch.Core.DataTypes;
using MySynch.Core.Interfaces;
using MySynch.Proxies.Autogenerated.Interfaces;
using Sciendo.Common.Logging;
using Sciendo.Common.Serialization;

namespace MySynch.Core.Publisher
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class PushPublisher:ILocalComponent,IPublisher
    {
        private IBrokerProxy _brokerClient;
        private FSWatcher _fsWatcher;
        internal string HostUrl;
        private object _lock= new object();
        private bool operationInProgress = false;

        #region Initialization Logic

        internal SynchItem CurrentRepository { get; set; }

        public void Initialize(IBrokerProxy brokerClient, MySynchLocalComponentConfigurationSection localComponentConfiguration, string hostUrl)
        {
            operationInProgress = true;
            if(brokerClient==null)
                throw new ArgumentNullException("brokerClient");
            if (string.IsNullOrEmpty(localComponentConfiguration.LocalRootFolder))
                throw new ArgumentNullException("localComponentConfiguration.RootFolder");
            if(string.IsNullOrEmpty(hostUrl))
                throw new ArgumentNullException("hostUrl");
            LoggingManager.Debug("Initializing publisher with rootfolder: " + localComponentConfiguration.LocalRootFolder);
            HostUrl = hostUrl;
            if(_brokerClient==null)
                _brokerClient = brokerClient;
            try
            {
                if (_fsWatcher == null)
                    _fsWatcher = new FSWatcher(localComponentConfiguration.LocalRootFolder, ProcessOperation);
                LoggingManager.Debug("Publisher initialized");

            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
            }
            finally
            {
                operationInProgress = false;
            }
        }
        #endregion

        #region Push Logic
        internal void ProcessOperation(string absolutePath, OperationType operationType)
        {
            operationInProgress = true;
            LoggingManager.Debug("Trying to publish an " + operationType + " for path: " + absolutePath);
            try
            {
                if (string.IsNullOrEmpty(absolutePath))
                    return;
                bool shouldPublish = false;
                lock (_lock)
                {
                    shouldPublish = UpdateCurrentRepository(absolutePath, operationType);
                    if (shouldPublish)
                    {
                        PublishMessage(absolutePath, operationType);
                        LoggingManager.Debug("Published Ok.");
                    }
                    else
                    {
                        LoggingManager.Debug("Not published probably a duplicate.");
                    }
                }
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);
                throw;
            }
            finally
            {
                operationInProgress = false;
            }
        }

        private void PublishMessage(string absolutePath, OperationType operationType)
        {
            ReceiveAndDistributeMessageRequest request = new ReceiveAndDistributeMessageRequest
                                                             {
                                                                 PublisherMessage = 
                                                                     new PublisherMessage
                                                                         {
                                                                             AbsolutePath = absolutePath,
                                                                             OperationType = operationType,
                                                                             SourceOfMessageUrl=HostUrl,
                                                                             SourcePathRootName=_fsWatcher.Path,
                                                                             MessageId=Guid.NewGuid()
                                                                         }
                                                             };
            try
            {
                LoggingManager.Debug("Sending request to broker.");
                _brokerClient.ReceiveAndDistributeMessage(request);
                LoggingManager.Debug("Request to broker sent.");
            }
            catch (Exception ex)
            {
                LoggingManager.LogSciendoSystemError(ex);                
            }
        }
        #endregion

        public void Close(object backupFileName=null)
        {
            while (operationInProgress)
                Thread.Sleep(500);

            Serializer.SerializeToFile(new List<SynchItem> { CurrentRepository }, (string)backupFileName);
        }

        #region Pull Logic
        public GetDataResponse GetData(GetDataRequest request)
        {
            operationInProgress = true;
            if (request == null || string.IsNullOrEmpty(request.FileName))
                throw new ArgumentNullException("request");
            if (!File.Exists(request.FileName))
                throw new ArgumentException("File does not exist " + request.FileName);
            LoggingManager.Debug("Using remote datasource returning contents of file: " + request.FileName);
            GetDataResponse response = new GetDataResponse();
            FileInfo fInfo = new FileInfo(request.FileName);
            response.Data = new byte[fInfo.Length];
            using (FileStream stream = fInfo.OpenRead())
            {
                stream.Read(response.Data, 0, response.Data.Length);
                stream.Flush();
            }
            operationInProgress = false;
            return response;
        }

        public GetHeartbeatResponse GetHeartbeat()
        {
            return new GetHeartbeatResponse {RootPath = _fsWatcher.Path, Status = true};
        }
        #endregion

        #region Persist traces for offline changes logic

        internal bool UpdateCurrentRepository(string absolutePath, OperationType operationType)
        {
            LoggingManager.Debug("Updating CurrentRepository with " + absolutePath);
            if(_fsWatcher==null || string.IsNullOrEmpty(_fsWatcher.Path))
                throw new PublisherSetupException(null,"Publisher not initialized");
            if(CurrentRepository==null)
                CurrentRepository=new SynchItem{SynchItemData = new SynchItemData{Identifier=_fsWatcher.Path,Name=_fsWatcher.Path,Size=0}};
            if (CurrentRepository.Items == null)
                CurrentRepository.Items=new List<SynchItem>();
            switch (operationType)
            {
                case OperationType.Insert:
                    return SynchItemManager.AddItem(CurrentRepository, absolutePath, new FileInfo(absolutePath).Length);
                    
                case OperationType.Update:
                    return SynchItemManager.UpdateExistingItem(CurrentRepository, absolutePath, new FileInfo(absolutePath).Length);
                    
                case OperationType.Delete:
                    return SynchItemManager.DeleteItem(CurrentRepository, absolutePath);
                    
                default:
                    return false;
            }
        }

        #endregion
    }
}
