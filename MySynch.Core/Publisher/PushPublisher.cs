using System;
using System.IO;
using MySynch.Common.Logging;
using MySynch.Contracts;
using MySynch.Contracts.Messages;
using MySynch.Core.DataTypes;
using MySynch.Core.Interfaces;
using MySynch.Proxies.Autogenerated.Interfaces;

namespace MySynch.Core.Publisher
{
    public class PushPublisher:ILocalComponent,IPublisher
    {
        private IBrokerProxy _brokerClient;
        private FSWatcher _fsWatcher;
        private string _hostUrl;

        #region Initialization Logic

        public void Initialize(IBrokerProxy brokerClient, LocalComponentConfig localComponentConfiguration, string hostUrl)
        {
            LoggingManager.Debug("Initializing publisher with rootfolder: " + localComponentConfiguration.RootFolder);
            if (string.IsNullOrEmpty(localComponentConfiguration.RootFolder))
                LoggingManager.LogMySynchSystemError(new ArgumentNullException("localComponentConfiguration.RootFolder"));
            LoggingManager.Debug("Publisher initialized");
            _hostUrl = hostUrl;
            _brokerClient = brokerClient;
            _fsWatcher = new FSWatcher(localComponentConfiguration.RootFolder, QueueInsert, QueueUpdate, QueueDelete);
        }
        #endregion

        private void QueueInsert(string absolutePath)
        {
            if (string.IsNullOrEmpty(absolutePath))
                return;
            LoggingManager.Debug("Will queue an insert for: " + absolutePath);
            PublishMessage(absolutePath, OperationType.Insert);
        }

        private void PublishMessage(string absolutePath, OperationType operationType)
        {
            ReceiveAndDistributeMessageRequest request = new ReceiveAndDistributeMessageRequest
                                                             {
                                                                 PublisherMessage = 
                                                                     new PublisherMessage
                                                                         {
                                                                             AbsolutePath = absolutePath,
                                                                             OperationType = operationType,
                                                                             SourceOfMessageUrl=_hostUrl,
                                                                             SourcePathRootName=_fsWatcher.Path 
                                                                         }
                                                             };
            _brokerClient.ReceiveAndDistributeMessage(request);
        }

        private void QueueUpdate(string absolutePath)
        {
            if (string.IsNullOrEmpty(absolutePath))
                return;
            LoggingManager.Debug("Will queue an update for: " + absolutePath);
            PublishMessage(absolutePath, OperationType.Update);
        }

        private void QueueDelete(string absolutePath)
        {
            if (string.IsNullOrEmpty(absolutePath))
                return;
            LoggingManager.Debug("Will queue a delete for: " + absolutePath);
            PublishMessage(absolutePath, OperationType.Delete);
        }

        public void Close()
        {
            return;
        }

        public GetDataResponse GetData(GetDataRequest request)
        {
            if (request == null || string.IsNullOrEmpty(request.FileName))
                throw new ArgumentNullException("request");
            if (!File.Exists(request.FileName))
                throw new ArgumentException("File does not exist " + request.FileName);
            LoggingManager.Debug("Using remote datasource returning contents of file: " + request.FileName);
            GetDataResponse response = new GetDataResponse();
            FileInfo fInfo = new FileInfo(request.FileName);
            response.Data = new byte[fInfo.Length];
            using (FileStream stream = fInfo.OpenRead())
            {
                stream.Read(response.Data, 0, response.Data.Length);
                stream.Flush();
            }
            return response;
        }

        public GetHeartbeatResponse GetHeartbeat()
        {
            throw new NotImplementedException();
        }
    }
}
