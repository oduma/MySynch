using System;
using System.Collections.Generic;
using System.IO;
using System.Timers;
using MySynch.Common;
using MySynch.Common.Logging;
using MySynch.Contracts.Messages;
using MySynch.Core;
using MySynch.Core.DataTypes;
using MySynch.Core.Interfaces;
using MySynch.Core.Publisher;
using MySynch.Proxies.Autogenerated.Implementations;

namespace MySynch.Publisher
{
    public partial class PublisherInstance : DelayStartingService
    {
        private IPushPublisher _pushPublisher;
        private PublisherConfig _publisherConfiguration;
        private BrokerClient _brokerClient;
        private AttachRequest _publisherAttachRequest;
        private string _hostUrl;

        public PublisherInstance()
        {
            LoggingManager.Debug("Initializing service");
            _publisherAttachRequest = new AttachRequest
                                         {
                                             RegistrationRequest =
                                                 new Registration
                                                     {
                                                         MessageMethod = "temp placeholder",
                                                         OperationTypes =
                                                             new List<OperationType>
                                                                 {
                                                                     OperationType.Delete,
                                                                     OperationType.Insert,
                                                                     OperationType.Update
                                                                 },
                                                         ServiceRole = ServiceRole.Publisher,
                                                         ServiceUrl = _hostUrl
                                                     }
                                         };
            _pushPublisher = new PushPublisher();
            InitializeComponent();
            _publisherConfiguration = ConfigurationHelper.ReadPublisherNodeConfiguration();
            LoggingManager.Debug("Will Initialize publishing changes from folder: " + _publisherConfiguration.RootFolder);
        }

        protected override void OnStart(string[] args)
        {
            LoggingManager.Debug("Starting service");
            CloseAllServiceHosts();
            if(InitializeLocalPublisher())
                StartTimer(60000,PublisherTimerElapseMethod);
            OpenAllServiceHosts();
            LoggingManager.Debug("Service started.");
        }

        private void PublisherTimerElapseMethod(object sender, ElapsedEventArgs e)
        {
            LoggingManager.Debug("Timer kicked in again.");
            Timer.Enabled = false;
            if (TryMakePublisherKnown(_publisherConfiguration.BrokerName))
            {
                Timer.Interval = 120000;
                Timer.Enabled = true;
                return;
            }
            Timer.Interval = 60000;
            Timer.Enabled = true;
            LoggingManager.Debug("Starting timer again.");

        }

        private bool TryMakePublisherKnown(string brokerName)
        {
            try
            {
                if (TryToOpenBroker(brokerName))
                {
                    LoggingManager.Debug("Trying to attach to the broker: " + brokerName);
                    _brokerClient.Attach(_publisherAttachRequest);
                    LoggingManager.Debug("Attached to broker: " + brokerName);
                    return true;
                }
                LoggingManager.Debug("Not attached to broker: " + brokerName);
                return false;
            }
            catch (Exception ex)
            {
                LoggingManager.LogMySynchSystemError(ex);
                LoggingManager.Debug("Not attached to broker: " + brokerName);
                return false;
            }
        }

        private bool TryToOpenBroker(string brokerName)
        {
            try
            {
                LoggingManager.Debug("Trying to open broker: "+ brokerName);
                if (_brokerClient == null)
                {
                    _brokerClient = new BrokerClient();
                    _brokerClient.InitiateUsingServerAddress(string.Format("http://{0}/broker", brokerName));
                }
                return _brokerClient.GetHeartbeat().Status;
                
            }
            catch (Exception ex)
            {
                _brokerClient = null;
                LoggingManager.LogMySynchSystemError(ex);
                return false;
            }
        }

        private bool InitializeLocalPublisher()
        {
            if (string.IsNullOrEmpty(_publisherConfiguration.RootFolder) || !Directory.Exists(_publisherConfiguration.RootFolder))
                return false;
            _pushPublisher.Initialize();
//                _changePublisher.Initialize(_rootFolder, new ItemDiscoverer());
//                FSWatcher fsWatcher = new FSWatcher(_changePublisher);
                
//                _serviceHosts.Add(CreateAndConfigureServiceHost<ISourceOfData, RemoteSourceOfData>(new Uri(string.Format("http://{0}:{1}/sourceOfData/{2}/",
//        System.Net.Dns.GetHostName(), _instancePort, Guid.NewGuid().ToString()))));
            return true;
        }

        protected override void OnStop()
        {
            LoggingManager.Debug("Stoping service");
            CloseAllServiceHosts();
            _pushPublisher.SaveSettingsEndExit();
            DetachFromBroker();
            LoggingManager.Debug("Service stoped.");
        }

        private void DetachFromBroker()
        {
            try
            {
                DetachRequest request = new DetachRequest { ServiceUrl = _hostUrl };
                if (_brokerClient.Detach(request).Status)
                {
                    LoggingManager.Debug("Publisher detached from the broker");
                    return;
                }
                LoggingManager.Debug("Publisher will stop but still attached to the broker");

            }
            catch (Exception ex)
            {
                LoggingManager.LogMySynchSystemError(ex);                
            }
        }
    }
}
